'use babel';

const fs = require('fs');
const CSON = require('cson');
const path = require('path');

export default class AtomSync {

  snippets_cson = path.join(path.dirname(atom.config.getUserConfigPath()),'snippets.cson');
  snippets_cson_data = undefined;

  constructor() {
    this.snippets_cson_data = CSON.parse(fs.readFileSync(this.snippets_cson));
  }

  sync(snippets) {
    var _this = this;
    snippets.forEach(function(e) {
      var prefix = e.getAcPrefix();
      var scope = e.getScope();

      if(_this.snippets_cson_data.hasOwnProperty(scope)) {
        if(_this.snippets_cson_data[scope].hasOwnProperty(e.getTitle())) {
          _this.snippets_cson_data[scope][e.getTitle()]['body'] = e.getContent();
          _this.snippets_cson_data[scope][e.getTitle()]['prefix'] = prefix;
        } else {
          var temp = new Object();
          temp[e.getTitle()] = {
            value: {
              body: e.getContent(),
              prefix: prefix
            },
            writable: true,
            configurable: true,
            enumerable: true
          };

          Object.defineProperties(_this.snippets_cson_data[scope],temp);
        }
      } else {
        var temp = new Object();
        var temp2 = new Object();
        temp2[e.getTitle()] = {
          body: e.getContent(),
          prefix: prefix
        };
        temp[scope] = {
          value: temp2,
          writable: true,
          configurable: true,
          enumerable: true
        };

        Object.defineProperties(_this.snippets_cson_data,temp);
      }
    });
    this._write();
  }

  remove(snippet) {
    this.snippets_cson_data[snippet.getScope()][snippet.getTitle()] = undefined;
    this._write();
  }

  _write() {
    var toFile = '# This file was autogenerated by the snippet-injector package\n'
                + '# more information: http://flight-manual.atom.io/using-atom/sections/snippets/\n'
                + CSON.stringify(this.snippets_cson_data).toString();
    fs.writeFileSync(this.snippets_cson,toFile);
  }
}
